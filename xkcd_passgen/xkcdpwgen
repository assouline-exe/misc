#!/usr/bin/python3

import sys
import argparse
import random

parser = argparse.ArgumentParser(description =
        "Generate a secure, memorable password using the XKCD method")

parser.add_argument('-w', '--words', type = int, default = 4,
        help = 'include WORDS words in the password (default = 4)')
parser.add_argument('-c', '--caps', type = int, default = 0,
        help = 'capitalize the first letter of CAPS random words (default = 0)')
parser.add_argument('-n', '--numbers', type = int, default = 0, 
        help = 'insert NUMBERS random numbers in the password')
parser.add_argument('-s', '--symbols', type = int, default = 0, 
        help = 'insert SYMBOLS random symbols in the password (default = 0)')

args = parser.parse_args()


wordCount = args.words
capitalizationCount = args.caps
numberCount = args.numbers
symbolCount = args.symbols 
try:
    capitalsList = random.sample(range(1, wordCount + 1), capitalizationCount)
except:
    capitalsList = list(range(1, wordCount + 1))

symbolsList = ["~", "!", "@", "#", "$", "%", "^", "&", "*", ".", ":", ";"]
passwordList = []


while wordCount > 0:
    if wordCount in capitalsList:
        randomWord = random.choice(open("words.txt").read().split()).capitalize()
        passwordList.append(randomWord)
        wordCount -=1
    else:
        randomWord = random.choice(open("words.txt").read().split())
        passwordList.append(randomWord)
        wordCount -=1

for _ in range(numberCount):
    passwordList.insert(random.randint(0, len(passwordList) + 1), str(random.randint(0,9)))

for _ in range(symbolCount):
    passwordList.insert(random.randint(0, len(passwordList) + 1), random.choice(symbolsList))

print("".join(passwordList))
